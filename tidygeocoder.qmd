---
title: "R Tip of the Day"
subtitle: "The tidygeocoder package"
author: "Elise Hachfeld"
date: "12-05-2024"
format:
  revealjs: 
    transition: slide
    slide-number: true
    preview-links: auto
    self-contained: true
    theme: simple
execute:
  echo: true
editor_options: 
  chunk_output_type: console
---

```{r echo=FALSE}
library(tidyverse)
library(janitor)
library(tidygeocoder)
library(maps)
library(readxl)
library(kableExtra)

url <- "https://raw.githubusercontent.com/PublicI/us-polling-places/update-2020/data/minnesota/input/2020-10-05/Polling_Place_List_for_Election_for_Excel_20201005.xls"

temp_file <- tempfile(fileext = ".xls")
download.file(url, temp_file, mode = "wb")

polling_data <- read_xls(temp_file) |>
  select("Polling Place Name", "Address", "Type") |>
  clean_names() 

twin_cities <- polling_data |>
  filter(str_detect(address, 'MINNEAPOLIS MN|ST PAUL MN'))

st_olaf_single <- tibble(address = c(
  "1500 St Olaf Ave, Northfield, MN 55057, USA"
))

st_olaf_whole <- tribble(
~street, ~cty, ~st, ~zip, ~country,
  "1500 St Olaf Ave", "Northfield", "MN", "55057", "USA"
)

api_info <- api_info_reference |>
  select(method, method_display_name) |>
  rename(name = method_display_name) |>
  left_join(min_time_reference) |>
  left_join(batch_limit_reference) |>
  left_join(api_key_reference) |>
  mutate(env_var = ifelse(is.na(env_var), "None", "API Key")) |>
  select(method, batch_limit, env_var) |>
  rename(has_api = env_var)

mn_map <- map_data("county") |> 
  filter(region == "minnesota") |>
  filter(subregion == "dakota" |subregion == "hennepin" | subregion == "ramsey")
```

## Why tidygeocoder? {auto-animate=true}

::: incremental
-   It takes addresses and converts them into latitude and longitude for plotting.
- It is integrated with 13 different APIs, including the US Census Bureau and arcgis.

:::

## API Information {auto-animate=true}
::: {.fragment .fade-in}
::: {.columns}
::: {.column width="50%"}
```{r echo=FALSE}
api_info[1:3,] |> 
  kable(col.names = c("Method", "Batch Limit", "Key?"),
        format = "html") |>
kable_styling(font_size = 30)
```
:::
::: {.column width="50%"}
```{r echo=FALSE}
api_info[4:13,] |> 
  kable(col.names = c("Method", "Batch Limit", "Key?"),
        format = "html") |>
kable_styling(font_size = 30)
```
:::
:::
:::

## Address Format Example {auto-animate="true"}
::: {.fragment}
```{r echo=FALSE}
head(st_olaf_single)
```
:::

::: {.fragment}
```{r}
ole <- st_olaf_single |>
 geocode(address,
         method = 'census', # choose which API to query
         lat = latitude, # name of lat column
         long = longitude) # name of long column
```
:::

::: {.fragment}
```{r echo=FALSE}
head(ole)
```
:::

## Expanded Format Example
::: incremental
- If your data set has addresses where columns are street, city, state, and optionally postal code and country, you can specify these in geocode().
:::

::: {.fragment}
```{r echo=FALSE}
head(st_olaf_whole)
```
::: 

::: {.fragment}
```{r}
ole <- st_olaf_whole |>
 geocode(street = street,
         city = cty,
         state = st,
         postalcode = zip,
         method = 'census',
         lat = latitude, 
         long = longitude) 
```
:::

::: {.fragment}
```{r echo=FALSE}
head(ole)
```
:::

## Example with Real Data (batched)
::: {.fragment}
Check the length is less than the batch limit:
```{r}
nrow(twin_cities)
```
:::

::: {.fragment}
Use the geocode function:
```{r}
addr <- twin_cities |>
 geocode(address,
         method = 'census',
         lat = latitude, long = longitude,
         full_results = FALSE)
```
:::

::: {.fragment}
```{r echo=FALSE}
addr |>
  select(address, latitude, longitude) |>
  head()
```
:::

## Dealing with NA results
::: {.fragment}
If the API returns a "tie" then the results will display as NA.
:::

::: {.fragment}
```{r}
ties <- addr |>
  filter(is.na(latitude) | is.na(longitude)) |>
  select(address, latitude, longitude) |>
  print()
```

```{r echo=FALSE}
ties <- ties |> select(address)
```

:::

::: {.fragment}
If you want a value for these, you can run them non-batched.
```{r}
tie_addr <- ties |>
geocode(address = address,
        method = 'census', 
        lat = latitude,
        long = longitude,
        mode = 'single') # specifies not to use batching
```
:::

## Dealing with NA results
::: {.fragment}
```{r echo=FALSE}
head(tie_addr)
```
:::

::: {.fragment}
```{r}
full_addr <- twin_cities |> 
  left_join(addr) |>
  left_join(tie_addr)
```
:::

## tidygeocoder in Practice
```{r, echo=FALSE}
ggplot() +
  geom_polygon(data = mn_map,
               aes(x = long,
                   y = lat,
                   group = group), alpha = 0.8) +
  geom_point(data = full_addr,
             aes(x = longitude,
                 y = latitude,
                 color = type)) + 
  labs(color = "Ballot Type",
       title = "Minneapolis and St. Paul Polling Places",
       caption = "Data: https://github.com/PublicI/us-polling-places") +
  coord_map() + 
  theme_void()
```

## Thanks!
Do you have any questions?

